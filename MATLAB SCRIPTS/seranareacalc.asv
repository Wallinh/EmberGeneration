clc
clear
close all

%% script to calculate number of holes in seran wrap

%% Set  calibration
% this will be done once per picture set
% as instructed, set crop and scale calibration for photo set

cd ..\Photos\Test   %modify to folder of photos
contents = dir('*.jpg');

filename = contents(3).name; %make this index of photo to set crop and scale

img = imread(filename); 
imshow(img)


disp('click on:');
disp('1) TL 30cm mark');
disp('2) TR 60 cm mark');
disp('3) BR 60cm mark');

disp('4) TL of image');
disp('5) BR of image');


[x_cal,y_cal] = ginput(5);

Cal_AREA = 700;  %[mm^2]                                        % Calibration Unit Length
Cal_pixels = (x_cal(2)-x_cal(1))*(y_cal(3)-y_cal(2));
Cal_scale  = Cal_AREA/Cal_pixels;                              % mm^2/pixel



%% image processing

%to process the image we will  resize the image,
%convert to grayscale, then convert to Bianary with adaptive or global thresholding.

%for the trashbag case, histogram equalization is not needed, nor is
%adaptive thresholding.

for i = 1:numel(contents)
    
    %read in image
    imgname = contents(i).name;
    img = imread(imgname);
    
    %Crop image
    img = img(y_cal(4):y_cal(5),x_cal(4):x_cal(5),:);
    
    %resize image
      img = imresize(img,.3); % TODO: need to scale before pixel count, or change pixel ratio. 
    
    %convert image to grayscale
    imgGs = rgb2gray(img);
    
    % Equalize histogram for sufficient contrast
    histOriginal = imhist(imgGs);
    imgGsEq = histeq(imgGs);


    %         %METHOD ! ADAPTIVE
    %     imgBiAdaptive = imbinarize(imgGs,'adaptive','Sensitivity',0.5);       %sensitivity is .5 by default; %'ForegroundPolarity','dark'
    %     figure
    %     imshowpair(imgGsEq,imgBiAdaptive,'montage'), title ('adaptive');
    %
    
    
    %METHOD 2, global
    %invert image
    imgGs = imcomplement(imgGs);
    imgBiGlobal = imbinarize(imgGs,'global') ;
%     figure
%     imshowpair(imgGs,imgBiGlobal,'montage'), title ('global');
    
  
    %% image calculations
    
    %OBJECT ANALYSIS
    %https://www.mathworks.com/help/images/pixel-values-and-image-statistics.html
    %https://www.mathworks.com/help/images/object-analysis.html
    
    %create a structure, where each image is an group. 
    %this is done two ways, need to verify which is appropriate test. 
    %bw area:  The area of an individual pixel is determined by looking at its 2-by-2 neighborhood
    infostruc(i).pixels =  regionprops(imgBiGlobal,'area');
    infostruc(i).bwarea = bwarea(imgBiGlobal);
    infostruc(i).centroid = regionprops(imgBiGlobal,'centroid');
    infostruc(i).sheet = i*ones(length(infostruc(i).pixels),1);

end

cd ..\..\Excel_data
%write number of pixels and their centroid
excelcolumn = ['A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z'];
excelrow = 1:1:500;
x=1
for k = 1:length(infostruc)
    %horizontal structure
%      writetable(struct2table(infostruc(k).pixels), 'burn_data.xlsx','sheet','burn1', 'Range', strcat(excelcolumn(1+5*k),num2str(excelrow(4))));
%     writetable(struct2table(infostruc(k).centroid), 'burn_data.xlsx','sheet','burn1', 'Range', strcat(excelcolumn(k+2+k*4),num2str(excelrow(4))));

  
    %vertiacl structure
    filename = 'burn_data.xlsx';
    A = urn_data.xls
 xlswrite(infostruc(k).sheet, 'myFile.xlsx','burn2', strcat(excelcolumn(2),num2str(excelrow(x))));
 writetable(struct2table(infostruc(k).pixels), 'burn_data.xlsx','sheet','burn2', 'Range', strcat(excelcolumn(2),num2str(excelrow(x))));
    writetable(struct2table(infostruc(k).centroid), 'burn_data.xlsx','sheet','burn2', 'Range', strcat(excelcolumn(3),num2str(excelrow(x))));

x = x+length(infostruc(k).pixels);
end
